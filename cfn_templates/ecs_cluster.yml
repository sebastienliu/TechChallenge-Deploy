Description: This template is to create the ecs cluster to host the Go app

Parameters:
  Environment:
    Description: The environment for the deployment
    Type: String
    Default: dev

  PrivateSubnet1:
    Description: PrivateSubnet1
    Type: String
    Default: subnet-0657d4beeb620c923

  PrivateSubnet2:
    Description: PrivateSubnet2
    Type: String
    Default: subnet-08b441476474e991c

Resources:
  TCListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${Environment}-ALBListener
      Priority: 100
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TCClusterTargetGroup
          Type: forward

  TCClusterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
###### Define ECS Cluster ######
  TCECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}_tccluster

  TCECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref TCECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: !Sub ${Environment}-tcapp
          ContainerPort: 3000
          TargetGroupArn: !Ref TCClusterTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${Environment}-ECSClusterSecurityGroup
      ServiceName: !Sub ${Environment}-tcappservice
      TaskDefinition: !Ref TCECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
    DependsOn: TCListenerRule

  TCECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: TechChallengeAmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/techchallenge
      RetentionInDays: 7

  TCECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !Ref TCECSTaskRole
      Family: TechChallenge
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub ${Environment}-tcapp
          EntryPoint:
            - "sh"
            - "-c"
          Command:
            - "/bin/sh -c \"./TechChallengeApp updatedb -s && ./TechChallengeApp serve\""
          Image: !Join
            - ":"
            - - Fn::ImportValue: !Sub ${Environment}-TechChallengeECRUri
              - latest
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: tcapp
